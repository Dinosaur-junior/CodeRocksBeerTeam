# -*- coding: utf-8 -*-
# It's a Telegram self.bot (telegram self.bot)
# Written by M1x7urk4
#
# ‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚ñà‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚îÄ
# ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚ñà‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà
# ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚ñà‚ñà
# ‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñà
# ‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà


# ---------------------------------------------------------------------------------------------------------------------
# Import libraries

import json
import os
from datetime import datetime

from telebot import TeleBot

import keyboard
from config import BOT_TOKEN, path
from database import Database
from funcitons import get_user, print_error, log, get_name

# ---------------------------------------------------------------------------------------------------------------------
# Different things for self.bot

# Creating database
db = Database()

# Tmp user actions variables
user_actions = dict()


# ---------------------------------------------------------------------------------------------------------------------
# Another classes

class User:
    def __init__(self, id, role=None, status='–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è', about=''):
        self.id = id
        self.role = role
        self.status = status
        self.beer_amount = 0
        self.about = about
        self.photo = None
        self.info = dict()


class Role:
    def __init__(self, id, name='', duties=list()):
        self.id = id
        self.name = name
        self.duties = duties


class Access_code:
    def __init__(self, id, role='', code='', one_time=True):
        self.id = id
        self.role = role
        self.code = code
        self.one_time = one_time


class Duty:
    def __init__(self, id, name, about='', question='', answers=dict()):
        self.id = id
        self.name = name
        self.about = about
        self.question = question
        self.answers = answers


class Message:
    def __init__(self, id, user_id, time, answer='', text='', file=None):
        self.id = id
        self.user_id = user_id
        self.time = time
        self.answer = answer
        self.text = text
        self.file = file


class Question:
    def __init__(self, id, question='', answer=''):
        self.id = id
        self.question = question
        self.answer = answer


# ---------------------------------------------------------------------------------------------------------------------
# The processing of incoming messages and commands

class Bot:
    def __init__(self):
        self.bot = TeleBot(token=BOT_TOKEN, threaded=True)
        self.users = list()  # List of all users : User
        self.duties = list()  # List of all duties : Duty

    # Get user by id 
    def get_user(self, id):
        for user in self.users:
            if str(user.id) == str(id):
                return user
        return None

    # Get code by 'code'
    def get_code(self, code):
        for access_code in self.access_codes:
            if access_code.code == code:
                return access_code
        return None

    def run(self):

        # -------------------------------------------------------------------------------
        # The processing of incoming messages and commands

        # Start command
        @self.bot.message_handler(commands=['start'])
        def start_msg(message):
            try:
                if message.chat.type not in ('group', 'supergroup', 'channel'):

                    cur_user = self.get_user(message.chat.id)
                    if cur_user is None:
                        cur_user = User(id=message.chat.id)
                        self.users.append(cur_user)

                        # if user is not exists
                        if not db.if_user_exists(message.from_user.id):
                            info = get_user(message)
                            cur_user.info = info
                            new_user = (message.from_user.id,
                                        cur_user.role,
                                        cur_user.status,
                                        cur_user.beer_amount,
                                        cur_user.about,
                                        cur_user.photo,
                                        json.dumps(cur_user.info))
                            db.users_add(new_user)
                        else:
                            # if user exist - get from db
                            db_user = db.users_get_one(message.chat.id)
                            cur_user.role = db_user[1]
                            cur_user.status = db_user[2]
                            cur_user.beer_amount = db_user[3]
                            cur_user.about = db_user[4]
                            cur_user.photo = db_user[5]
                            cur_user.info = db_user[6]

                    if cur_user.role is None:
                        # if user not registered (no code)
                        self.bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏–≤–æ–≤–∞—Ä–Ω—é! üç∫\n\n'
                                                                    '–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É',
                                              reply_markup=keyboard.menu())
                    else:
                        # if user registered (yes code)
                        self.bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–∏–≤–æ–≤–∞—Ä–Ω—é! üç∫',
                                              reply_markup=keyboard.menu_reg())

            # Error
            except Exception as e:
                self.bot.send_message(message.from_user.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
                print_error(e)

        # -------------------------------------------------------------------------------
        # The processing of incoming text messages
        @self.bot.message_handler(content_types=['text', 'photo', 'document', 'video', 'contact', 'location'])
        def text_message(message):
            try:
                cur_user = self.get_user(message.chat.id)
                if cur_user is None:
                    cur_user = User(id=message.chat.id)
                    self.users.append(cur_user)

                    # if user is not exists
                    if not db.if_user_exists(message.from_user.id):
                        info = get_user(message)
                        cur_user.info = info
                        new_user = (message.from_user.id,
                                    cur_user.role,
                                    cur_user.status,
                                    cur_user.beer_amount,
                                    cur_user.about,
                                    cur_user.photo,
                                    json.dumps(cur_user.info))
                        db.users_add(new_user)
                    else:
                        # if user exist - get from db
                        db_user = db.users_get_one(message.chat.id)
                        cur_user.role = db_user[1]
                        cur_user.status = db_user[2]
                        cur_user.beer_amount = db_user[3]
                        cur_user.about = db_user[4]
                        cur_user.photo = db_user[5]
                        cur_user.info = db_user[6]

                if cur_user.role is None:
                    # if user not registered (no code)
                    main_keyboard = keyboard.menu
                else:
                    # if user registered (yes code)
                    main_keyboard = keyboard.menu_reg

                if cur_user.role is None:
                    # if user not registered (no code)
                    if message.text == 'üêà –í–≤–µ—Å—Ç–∏ –∫–æ–¥':
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:',
                                                    reply_markup=keyboard.back())
                        self.bot.register_next_step_handler(msg, enter_code)
                    elif message.text == 'üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º':
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É:',
                                                    reply_markup=keyboard.back())
                        self.bot.register_next_step_handler(msg, enter_question)
                    elif message.text == '‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏':
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–ü—Ä–µ–¥–ª–∞–≥–∞—é –í–∞–º –ø—Ä–æ–π—Ç–∏ —ç–∫—Å—É—Ä—Å –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å',
                                                    reply_markup=keyboard.start_btn())
                        self.bot.register_next_step_handler(msg, start_cmp_info_game)
                    else:
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',
                                                    reply_markup=main_keyboard())
                else:
                    # if user registered (yes code)
                    if message.text == '‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
                        db_questions = db.questions_get_all()
                        questions = [Question(id=db_question[0],
                                              question=db_question[1],
                                              answer=db_question[2]) for db_question in db_questions]
                        self.bot.send_message(chat_id=message.chat.id,
                                              text=f'–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
                                              reply_markup=keyboard.often_questions(questions))

                    elif message.text == 'üë®üèø‚Äçüíª –ú–æ–∏ –∫–æ–ª–ª–µ–≥–∏':
                        db_users = db.users_get_all()
                        db_users = [i for i in db_users if i[1] is not None]
                        db_users.sort(key=lambda x: x[0])
                        if message.chat.id not in user_actions:
                            user_actions[message.chat.id] = {'nav_bar_id': 0}

                        while user_actions[message.chat.id]['nav_bar_id'] < len(db_users):
                            id = user_actions[message.chat.id]['nav_bar_id']
                            role = db.roles_get_one(db_users[id][1])[1]
                            if db_users[id][5] is not None:
                                self.bot.send_photo(chat_id=message.chat.id,
                                                    photo=db_users[id][5],
                                                    caption=f'–û–ø–∏—Å–∞–Ω–∏–µ: {db_users[id][4] if  len(db_users[id][4]) > 0 else "—Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ :("}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n{get_name(db_users[id][-1])}',
                                                    reply_markup=keyboard.nav_bar(
                                                        user_actions[message.chat.id]['nav_bar_id'], len(db_users)),
                                                    parse_mode='HTML')
                                break
                            else:
                                try:
                                    self.bot.send_message(chat_id=message.chat.id,
                                                          text=f'–û–ø–∏—Å–∞–Ω–∏–µ: {db_users[id][4] if  len(db_users[id][4]) > 0 else "—Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ :("}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n{get_name(db_users[id][-1])}',
                                                          reply_markup=keyboard.nav_bar(
                                                              user_actions[message.chat.id]['nav_bar_id'],
                                                              len(db_users)),
                                                          parse_mode='HTML')
                                    break
                                except:
                                    user_actions[message.chat.id]['nav_bar_id'] += 1
                                    if user_actions[message.chat.id]['nav_bar_id'] == len(db_users):
                                        user_actions.pop(message.chat.id)
                                        self.bot.send_message(chat_id=message.chat.id,
                                                              text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!',
                                                              reply_markup=keyboard.menu_reg())
                                        break

                    elif message.text == '‚ùóÔ∏è –ú–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏':
                        if cur_user.info['training_done']:
                            duties = db.get_duties_by_role_id(cur_user.role)
                            duties = [i[1] for i in duties]
                            duties = '\n'.join(duties)
                            self.bot.send_message(chat_id=message.chat.id,
                                                  text=f'–í–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n{duties}')
                        else:
                            self.bot.send_message(chat_id=message.chat.id,
                                                  text='–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –í–∞—à–º–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º!',
                                                  reply_markup=keyboard.menu_reg())

                    elif message.text == 'üìö –ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ':
                        if cur_user.info['training_done']:
                            msg = self.bot.send_message(chat_id=message.chat.id,
                                                        text='–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ.\n–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞?',
                                                        reply_markup=keyboard.training_again())
                            self.bot.register_next_step_handler(msg, training_again)
                        else:
                            db.users_update_info(message.chat.id, 'status', '–û–±—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1')
                            db_duties = db.get_duties_by_role_id(cur_user.role)

                            self.duties = [Duty(id=db_duty[0],
                                                name=db_duty[1],
                                                about=db_duty[2],
                                                question=db_duty[3],
                                                answers=db_duty[4]) for db_duty in db_duties]
                            self.bot.send_message(chat_id=message.chat.id,
                                                  text=f'–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å ‚Ññ1: {self.duties[0].name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {self.duties[0].about}\n\n–í–æ–ø—Ä–æ—Å: {self.duties[0].question}',
                                                  reply_markup=keyboard.duties_training(0, self.duties[0].answers))
                    elif message.text == 'üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º':
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É:',
                                                    reply_markup=keyboard.back())
                        self.bot.register_next_step_handler(msg, enter_question)

                    elif message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏':
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–ü—Ä–µ–¥–ª–∞–≥–∞—é –í–∞–º –ø—Ä–æ–π—Ç–∏ —ç–∫—Å—É—Ä—Å –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å',
                                                    reply_markup=keyboard.start_btn())
                        self.bot.register_next_step_handler(msg, start_cmp_info_game)

                    elif message.text == 'üó∫ –ö–∞—Ä—Ç–∞ –æ—Ñ–∏—Å–∞':
                        self.bot.send_photo(chat_id=message.chat.id,
                                            photo=open(os.path.join(path, 'static', 'office_map.jpg'), 'rb'),
                                            caption='–ù–µ –∑–∞–±–ª—É–¥–∏—Ç–µ—Å—å!')

                    elif message.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
                        cur_user = db.users_get_one(message.chat.id)
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text=f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n'
                                                         f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {db.roles_get_one(cur_user[1])[1]}\n'
                                                         f'–ö–æ–ª-–≤–æ –ø–∏–≤–∞: {cur_user[3]} —à—Ç.',
                                                    reply_markup=keyboard.profile())
                        self.bot.register_next_step_handler(msg, profile_main_page)

                    else:
                        msg = self.bot.send_message(chat_id=message.chat.id,
                                                    text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',
                                                    reply_markup=main_keyboard())

            # Error
            except Exception as e:
                self.bot.send_message(message.from_user.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
                print_error(e)

        # ---------------------------------------------------------------------------------------------------------------------
        # Next-step handlers

        def enter_code(message):
            cur_user = self.get_user(message.chat.id)

            if message.text == '<< –ù–∞–∑–∞–¥':
                if cur_user.role is None:
                    # if user not registered (no code)
                    self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                          reply_markup=keyboard.menu())
                else:
                    # if user registered (yes code)
                    self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                          reply_markup=keyboard.menu_reg())
            else:
                db_code = db.access_codes_get_by_code(message.text)
                if db_code is not None:
                    code = Access_code(id=db_code[0], role=db_code[1], code=db_code[2], one_time=db_code[3])

                    db_role = db.roles_get_one(code.role)
                    role = Role(id=db_role[0], name=db_role[1], duties=db_role[2])
                else:
                    code = None

                if code is None:
                    # Incorrect code
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!',
                                                reply_markup=keyboard.back())
                    self.bot.register_next_step_handler(msg, enter_code)
                else:
                    # Correct code
                    cur_user.role = role

                    # update db
                    db.users_update_info(message.chat.id, "role", cur_user.role.id)

                    # if one-time code
                    if code.one_time:
                        db.access_codes_delete(code.id)

                    self.bot.send_message(chat_id=message.chat.id,
                                          text=f'–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å: {cur_user.role.name}',
                                          reply_markup=keyboard.menu_reg())

        def enter_question(message):
            cur_user = self.get_user(message.chat.id)

            if cur_user.role is None:
                # if user not registered (no code)
                cur_keyboard = keyboard.menu
            else:
                # if user registered (yes code)
                cur_keyboard = keyboard.menu_reg

            if message.text == '<< –ù–∞–∑–∞–¥':
                self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                      reply_markup=cur_keyboard())
            elif message.content_type not in ['photo', 'text']:
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–í–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞!\n'
                                                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:',
                                            reply_markup=keyboard.back())
                self.bot.register_next_step_handler(msg, enter_question)
            else:
                if message.content_type == 'photo':
                    file_info = self.bot.get_file(message.photo[-1].file_id)
                    downloaded_file = self.bot.download_file(file_info.file_path)
                    question_data = downloaded_file
                else:
                    question_data = None

                # Send request to admins
                db.messages_add((message.chat.id, datetime.now(), False, message.text, question_data))
                cur_user.info['unread'] = "True"
                db.users_update_info(cur_user.id, "info", json.dumps(cur_user.info))

                self.bot.send_message(chat_id=message.chat.id,
                                      text='–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º!',
                                      reply_markup=cur_keyboard())

        def start_cmp_info_game(message):
            cur_user = self.get_user(message.chat.id)

            if cur_user.role is None:
                # if user not registered (no code)
                cur_keyboard = keyboard.menu
            else:
                # if user registered (yes code)
                cur_keyboard = keyboard.menu_reg

            if message.text == '<< –ù–∞–∑–∞–¥':
                self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                      reply_markup=cur_keyboard())
            elif message.text == '‚ñ∂Ô∏è –°–¢–ê–†–¢':
                db.users_update_info(message.chat.id, 'status', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1')
                self.bot.send_message(chat_id=message.chat.id,
                                      text='–õ–∏–Ω–µ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–∏–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ BeerCoders - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–∏–≤–∞, –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ä—Ç–æ–≤ –¥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –¥–∞–∂–µ —Å–∞–º—ã—Ö –∏—Å–∫—É—à–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–∞ 1 –º–µ—Å—è—Ü?',
                                      reply_markup=keyboard.cmp_info_game_1())
            else:
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',
                                            reply_markup=keyboard.start_btn())
                self.bot.register_next_step_handler(msg, start_cmp_info_game)

        def training_again(message):
            cur_user = self.get_user(message.chat.id)

            if message.text == '<< –ù–∞–∑–∞–¥':
                self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                      reply_markup=keyboard.menu_reg())
            elif message.text == '–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑':
                db.users_update_info(message.chat.id, 'status', '–û–±—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1')
                db_duties = db.get_duties_by_role_id(cur_user.role)
                self.duties = [Duty(id=db_duty[0],
                                    name=db_duty[1],
                                    about=db_duty[2],
                                    question=db_duty[3],
                                    answers=db_duty[4]) for db_duty in db_duties]
                self.bot.send_message(chat_id=message.chat.id,
                                      text=f'–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å ‚Ññ1: {self.duties[0].name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {self.duties[0].about}\n\n–í–æ–ø—Ä–æ—Å: {self.duties[0].question}',
                                      reply_markup=keyboard.duties_training(0, self.duties[0].answers))
            else:
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',
                                            reply_markup=keyboard.training_again())
                self.bot.register_next_step_handler(msg, training_again)

        # users profile main page
        def profile_main_page(message):
            cur_user = db.users_get_one(message.chat.id)

            if message.text == '<< –ù–∞–∑–∞–¥':
                self.bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                      reply_markup=keyboard.menu_reg())
            elif message.text == 'üç∫ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–¥–∞—á—É –ø–∏–≤–∞':
                if cur_user[3] == 0:
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏–≤–∞ :(',
                                                reply_markup=keyboard.profile())
                    self.bot.register_next_step_handler(msg, profile_main_page)

                else:
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–í–∞—à–µ –ø–∏–≤–æ:',
                                                reply_markup=keyboard.profile())
                    msg = self.bot.send_animation(chat_id=message.chat.id,
                                                  animation=open(os.path.join(path, 'static', 'beer.gif'), 'rb'))

                    db.users_update_info(cur_user[0], 'beer_amount', cur_user[3] - 1)
                    self.bot.register_next_step_handler(msg, profile_main_page)

            elif message.text == 'üñº –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞':

                if cur_user[4] == '' and cur_user[5] is None:
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
                                                reply_markup=keyboard.card_setup())
                elif cur_user[5] is None:
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text=cur_user[4],
                                                reply_markup=keyboard.card_setup())

                else:
                    msg = self.bot.send_photo(chat_id=message.chat.id,
                                              caption=cur_user[4],
                                              photo=cur_user[5],
                                              reply_markup=keyboard.card_setup())
                self.bot.register_next_step_handler(msg, profile_main_page)
            else:
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',
                                            reply_markup=keyboard.training_again())
                self.bot.register_next_step_handler(msg, training_again)

        def edit_profile_about(message):

            if message.text == '<< –ù–∞–∑–∞–¥':
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:',
                                            reply_markup=keyboard.profile())
                self.bot.register_next_step_handler(msg, profile_main_page)

            else:
                db.users_update_info(message.chat.id, 'about', message.text)
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
                                            reply_markup=keyboard.profile())
                self.bot.register_next_step_handler(msg, profile_main_page)

        def edit_profile_photo(message):

            if message.text == '<< –ù–∞–∑–∞–¥':
                msg = self.bot.send_message(chat_id=message.chat.id,
                                            text='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:',
                                            reply_markup=keyboard.profile())
                self.bot.register_next_step_handler(msg, profile_main_page)

            else:
                if message.content_type != 'photo':
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ')
                    self.bot.register_next_step_handler(msg, edit_profile_photo)
                else:
                    file_id = message.photo[-1].file_id
                    file_info = self.bot.get_file(file_id)
                    downloaded_file = self.bot.download_file(file_info.file_path)
                    db.users_update_info(message.chat.id, 'photo', downloaded_file)
                    msg = self.bot.send_message(chat_id=message.chat.id,
                                                text='–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                                                reply_markup=keyboard.profile())
                    self.bot.register_next_step_handler(msg, profile_main_page)

        # ---------------------------------------------------------------------------------------------------------------------
        # Inline buttons

        # Some functions for processing of incoming text messages
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_query(call):
            try:
                cur_user = self.get_user(call.message.chat.id)

                if len(call.data.split('|')) == 2:
                    prefix, data = call.data.split('|')
                else:
                    prefix, data, answ = call.data.split('|')

                if prefix == 'cmp_info_game':
                    if data == '1':
                        db.users_update_info(call.message.chat.id, 'status', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2')
                        # –í–æ–ø—Ä–æ—Å 1
                        if answ == 'True':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 1/3\n\n–õ–∏–Ω–µ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–∏–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ BeerCoders - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–∏–≤–∞, –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ä—Ç–æ–≤ –¥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –¥–∞–∂–µ —Å–∞–º—ã—Ö –∏—Å–∫—É—à–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–∞ 1 –º–µ—Å—è—Ü?\n\n–û—Ç–≤–µ—Ç: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 40 —Ç–æ–Ω–Ω –ø–∏–≤–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–æ–≥–∏–º –ª—é–¥—è–º –ø–∏—Ç—å –ø–∏–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å :)\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +4 –ø–∏–≤–∞!',
                                                       reply_markup=keyboard.cmp_info_game_1_answer())
                            self.bot.answer_callback_query(call.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                                    '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—É—Ç—ã–ª–∫—É –ø–∏–≤–∞!', show_alert=True)
                            cur_user.beer_amount += 1
                            db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)

                        elif answ == 'False':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 1/3\n\n–õ–∏–Ω–µ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–∏–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ BeerCoders - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–∏–≤–∞, –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ä—Ç–æ–≤ –¥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∏–≤—è—Ç –¥–∞–∂–µ —Å–∞–º—ã—Ö –∏—Å–∫—É—à–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –ø–∏–≤–∞ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–∞ 1 –º–µ—Å—è—Ü?\n\n–û—Ç–≤–µ—Ç: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 40 —Ç–æ–Ω–Ω –ø–∏–≤–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–æ–≥–∏–º –ª—é–¥—è–º –ø–∏—Ç—å –ø–∏–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å :)',
                                                       reply_markup=keyboard.cmp_info_game_1_answer())
                        elif answ == 'next':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 2/3\n\n–í–æ–¥–∞ - –æ–Ω–∞ –µ—Å—Ç—å –≤–µ–∑–¥–µ, –¥–∞–∂–µ –≤ –ø–∏–≤–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏–∏ –≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —á–∏—Å—Ç–æ–π. –û—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã –∑–∞–≤–∏—Å–∏—Ç –≤–∫—É—Å –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—ä–µ–º–∞ –ø–∏–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–¥–∞?',
                                                       reply_markup=keyboard.cmp_info_game_2())
                    elif data == '2':
                        db.users_update_info(call.message.chat.id, 'status', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 3')
                        # –í–æ–ø—Ä–æ—Å 2
                        if answ == 'True':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 2/3\n\n–í–æ–¥–∞ - –æ–Ω–∞ –µ—Å—Ç—å –≤–µ–∑–¥–µ, –¥–∞–∂–µ –≤ –ø–∏–≤–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏–∏ –≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —á–∏—Å—Ç–æ–π. –û—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã –∑–∞–≤–∏—Å–∏—Ç –≤–∫—É—Å –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—ä–µ–º–∞ –ø–∏–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–¥–∞?\n\n–û—Ç–≤–µ—Ç: –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤—ã, 95% - –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–¥—ã –≤ –Ω–∞—à–µ–º –ø–∏–≤–µ. –ü—Ä–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ä—Ç–æ–≤ –Ω–∞—à–µ–≥–æ –ø–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ–¥–∞ –∏–∑ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –≥–ª—É–±–∏–Ω–µ –¥–æ 200 –º–µ—Ç—Ä–æ–≤\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +4 –ø–∏–≤–∞!',
                                                       reply_markup=keyboard.cmp_info_game_2_answer())

                            self.bot.answer_callback_query(call.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                                    '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—É—Ç—ã–ª–∫—É –ø–∏–≤–∞!', show_alert=True)
                            cur_user.beer_amount += 1
                            db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)

                        elif answ == 'False':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 2/3\n\n–í–æ–¥–∞ - –æ–Ω–∞ –µ—Å—Ç—å –≤–µ–∑–¥–µ, –¥–∞–∂–µ –≤ –ø–∏–≤–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏–∏ –≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —á–∏—Å—Ç–æ–π. –û—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã –∑–∞–≤–∏—Å–∏—Ç –≤–∫—É—Å –ø–∏–≤–∞.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—ä–µ–º–∞ –ø–∏–≤–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤–æ–¥–∞?\n\n–û—Ç–≤–µ—Ç: 95% - –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–¥—ã –≤ –Ω–∞—à–µ–º –ø–∏–≤–µ. –ü—Ä–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ä—Ç–æ–≤ –Ω–∞—à–µ–≥–æ –ø–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ–¥–∞ –∏–∑ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –≥–ª—É–±–∏–Ω–µ –¥–æ 200 –º–µ—Ç—Ä–æ–≤',
                                                       reply_markup=keyboard.cmp_info_game_2_answer())
                        elif answ == 'next':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 3/3\n\nBeerCoders - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–∞—à–∞ –ª–∏–Ω–µ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–∏–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ñ—Ä—É–∫—Ç–æ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏, –ø–∏–≤–æ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏, –ø–∏–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ö–º–µ–ª–µ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–æ—Ä—Ç–∞ –ø–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–∏—Ö –ø–∏–≤–Ω—ã—Ö –±–∞—Ä–∞—Ö.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, –∫–∞–∫–æ–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –ø–∏–≤–æ?',
                                                       reply_markup=keyboard.cmp_info_game_3())
                    elif data == '3':
                        db.users_update_info(call.message.chat.id, 'status', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 3')
                        # –í–æ–ø—Ä–æ—Å 3
                        if answ == 'True':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 3/3\n\nBeerCoders - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ù–∞—à–∞ –ª–∏–Ω–µ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–∏–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ñ—Ä—É–∫—Ç–æ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏, –ø–∏–≤–æ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏, –ø–∏–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ö–º–µ–ª–µ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–æ—Ä—Ç–∞ –ø–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–∏—Ö –ø–∏–≤–Ω—ã—Ö –±–∞—Ä–∞—Ö.\n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, –∫–∞–∫–æ–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –ø–∏–≤–æ?\n\n–û—Ç–≤–µ—Ç: –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å —Å –ø–æ–¥–≤–æ—Ö–æ–º, –ø–∏–≤–æ - –æ–Ω–æ –µ—Å—Ç—å –ø–∏–≤–æ, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–∏–¥—ã –ø–∏–≤–∞ - —Å–∞–º—ã–µ –ª—É—á—à–∏–µ ;)\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +4 –ø–∏–≤–∞!',
                                                       reply_markup=keyboard.cmp_info_game_3_answer())

                            self.bot.answer_callback_query(call.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                                    '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—É—Ç—ã–ª–∫—É –ø–∏–≤–∞!', show_alert=True)
                            cur_user.beer_amount += 1
                            db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)

                        elif answ == 'False':
                            self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                       message_id=call.message.id,
                                                       text='–í–æ–ø—Ä–æ—Å 3/3\n\n–û—Ç–≤–µ—Ç: ...',
                                                       reply_markup=keyboard.cmp_info_game_3_answer())

                        # elif answ == 'next':
                        #     self.bot.edit_message_text(chat_id=call.message.chat.id,
                        #                            message_id=call.message.id,
                        #                            text=f'–ú–æ–ª–æ–¥—Ü—ã, —Ç–µ–ø–µ—Ä—å –í—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π!',
                        #                            reply_markup=keyboard.cmp_info_game_3())
                    elif data == 'end':
                        db.users_update_info(call.message.chat.id, 'status', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ - –∑–∞–≤–µ—Ä—à–∏–ª')
                        cur_user.beer_amount += 5
                        db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)
                        self.bot.send_message(chat_id=call.message.chat.id, text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–ø–∞–Ω–∏–µ–π '
                                                                                 '–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ https://dym-dino.ru\n\n'
                                                                                 '–ê –ø–æ–∫–∞ –º—ã –≤–∞–º –≤—ã–¥–∞–ª–∏ 5 –±—É—Ç—ã–ª–æ–∫ –ø–∏–≤–∞!')
                        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                        cur_user = self.get_user(call.message.chat.id)

                        self.bot.delete_message(chat_id=call.message.chat.id,
                                                message_id=call.message.id)

                        if cur_user.role is None:
                            # if user not registered (no code)
                            self.bot.send_message(call.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                                  reply_markup=keyboard.menu())
                        else:
                            # if user registered (yes code)
                            self.bot.send_message(call.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üç∫',
                                                  reply_markup=keyboard.menu_reg())
                elif prefix == 'duties_training':
                    if answ in ['True', 'False']:
                        self.bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                                           message_id=call.message.id,
                                                           reply_markup=keyboard.duties_training_answ(int(data),
                                                                                                      self.duties[
                                                                                                          int(data)].answers,
                                                                                                      len(self.duties)))
                        if answ == 'True':
                            self.bot.answer_callback_query(call.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                                    '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—É—Ç—ã–ª–∫—É –ø–∏–≤–∞!', show_alert=True)
                            cur_user.beer_amount += 1
                            db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)

                    elif answ == 'next':
                        next_id = int(data) + 1
                        db.users_update_info(call.message.chat.id, 'status',
                                             f'–û–±—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {next_id + 1}')
                        self.bot.edit_message_text(chat_id=call.message.chat.id,
                                                   message_id=call.message.id,
                                                   text=f'–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å ‚Ññ{next_id + 1}: {self.duties[next_id].name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {self.duties[next_id].about}\n\n–í–æ–ø—Ä–æ—Å: {self.duties[next_id].question}',
                                                   reply_markup=keyboard.duties_training(next_id,
                                                                                         self.duties[next_id].answers))
                    elif answ == 'end':
                        cur_user = self.get_user(call.message.chat.id)
                        cur_user.info['training_done'] = True
                        db.users_update_info(call.message.chat.id, 'status', '–û–±—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º - –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                        db.users_update_info(call.message.chat.id, 'info', json.dumps(cur_user.info))

                        self.bot.delete_message(chat_id=call.message.chat.id,
                                                message_id=call.message.id)

                        self.bot.send_message(call.message.chat.id,
                                              '–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 5 –±—É—Ç—ã–ª–æ–∫ –ø–∏–≤–∞!',
                                              reply_markup=keyboard.menu_reg())
                        cur_user.beer_amount += 5
                        db.users_update_info(cur_user.id, 'beer_amount', cur_user.beer_amount)

                elif prefix == 'card_setup':
                    self.bot.clear_step_handler_by_chat_id(call.message.chat.id)
                    if data == 'about':
                        msg = self.bot.send_message(chat_id=call.message.chat.id,
                                                    text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                                                    reply_markup=keyboard.back())
                        self.bot.register_next_step_handler(msg, edit_profile_about)

                    elif data == 'photo':
                        msg = self.bot.send_message(chat_id=call.message.chat.id,
                                                    text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ',
                                                    reply_markup=keyboard.back())
                        self.bot.register_next_step_handler(msg, edit_profile_photo)

                elif prefix == 'often_questions':
                    db_questions = db.questions_get_one(int(data))
                    self.bot.send_message(chat_id=call.message.chat.id,
                                          text=f'–í–æ–ø—Ä–æ—Å: {db_questions[1]}\n–û—Ç–≤–µ—Ç: {db_questions[2]}',
                                          reply_markup=keyboard.menu_reg())
                elif prefix == 'nav_bar':
                    db_users = db.users_get_all()
                    db_users = [i for i in db_users if i[1] is not None]
                    db_users.sort(key=lambda x: x[0])

                    if answ == 'next':
                        if int(data) + 1 < len(db_users):
                            id = int(data) + 1
                        else:
                            id = 0
                    elif answ == 'back':
                        if int(data) - 1 >= 0:
                            id = int(data) - 1
                        else:
                            id = len(db_users) - 1
                    else:
                        return

                    role = db.roles_get_one(db_users[id][1])[1]
                    self.bot.delete_message(chat_id=call.message.chat.id,
                                            message_id=call.message.id)
                    if db_users[id][5] is not None:
                        self.bot.send_photo(chat_id=call.message.chat.id,
                                            photo=db_users[id][5],
                                            caption=f'–û–ø–∏—Å–∞–Ω–∏–µ: {db_users[id][4] if  len(db_users[id][4]) > 0 else "—Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ :("}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n{get_name(db_users[id][-1])}',
                                            reply_markup=keyboard.nav_bar(id, len(db_users)),
                                            parse_mode='HTML')
                    else:
                        self.bot.send_message(chat_id=call.message.chat.id,
                                              text=f'–û–ø–∏—Å–∞–Ω–∏–µ: {db_users[id][4] if  len(db_users[id][4]) > 0 else "—Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ :("}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n{get_name(db_users[id][-1])}',
                                              reply_markup=keyboard.nav_bar(id, len(db_users)),
                                              parse_mode='HTML')

            except Exception as e:
                print_error(e)
                self.bot.send_message(call.from_user.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')

        # ---------------------------------------------------------------------------------------------------------------------
        # Launch bot thread
        log(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        self.bot.infinity_polling()


# ---------------------------------------------------------------------------------------------------------------------
# Main loop

if __name__ == "__main__":
    bot = Bot()
    bot.run()
